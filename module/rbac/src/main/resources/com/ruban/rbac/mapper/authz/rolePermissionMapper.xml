<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruban.rbac.dao.authz.IRolePermissionMapper">

	<select id="selectAll" resultType="com.ruban.rbac.domain.authz.RolePermission">
		SELECT 
			s.ID as id, s.FLAG as flag, s.ROLE_ID as roleId, r.NAME as roleName,
			s.RESOURCE_ID as resourceId, res.NAME as resourceName,
			s.MOD_TIME as modTime, s.MOD_USER_ID as modUserId
		FROM AUTHZ_R_ROLE_PERMISSION s 
		LEFT JOIN AUTHZ_T_ROLE r on s.ROLE_ID = r.ID
		LEFT JOIN SYS_T_RESOURCE res on s.RESOURCE_ID = res.ID
		ORDER BY s.MOD_TIME DESC
	</select>
	
	<select id="selectWithCondition" resultType="com.ruban.rbac.domain.authz.RolePermission">
		SELECT 
			s.ID as id, s.FLAG as flag, s.ROLE_ID as roleId, r.NAME as roleName,
			s.RESOURCE_ID as resourceId, res.NAME as resourceName,
			s.MOD_TIME as modTime, s.MOD_USER_ID as modUserId
		FROM AUTHZ_R_ROLE_PERMISSION s 
		LEFT JOIN AUTHZ_T_ROLE r on s.ROLE_ID = r.ID
		LEFT JOIN SYS_T_RESOURCE res on s.RESOURCE_ID = res.ID
		WHERE 1 = 1
		<if test="resourceId != null">
			and s.RESOURCE_ID = #{resourceId}
		</if>
		<if test="roleId != null">
			and s.ROLE_ID = #{roleId}
		</if>
		ORDER BY s.MOD_TIME DESC
	</select>

	<select id="findById" parameterType="java.lang.Long" resultType="com.ruban.rbac.domain.authz.RolePermission">
		SELECT 
			s.ID as id, s.FLAG as flag, s.ROLE_ID as roleId, r.NAME as roleName,
			s.RESOURCE_ID as resourceId, res.NAME as resourceName,
			s.MOD_TIME as modTime, s.MOD_USER_ID as modUserId
		FROM AUTHZ_R_ROLE_PERMISSION s 
		LEFT JOIN AUTHZ_T_ROLE r on s.ROLE_ID = r.ID
		LEFT JOIN SYS_T_RESOURCE res on s.RESOURCE_ID = res.ID
		WHERE s.id = #{id}
	</select>
	
	<delete id="deleteById" parameterType="java.lang.Long">
		DELETE FROM AUTHZ_R_ROLE_PERMISSION
		WHERE id = #{id}
	</delete>
	
	<delete id="deleteByIds" parameterType="java.lang.String">
		DELETE FROM AUTHZ_R_ROLE_PERMISSION
		WHERE id in 
        <foreach item="ids" collection="array" open="(" separator="," close=")">  
        	#{ids}  
        </foreach> 
	</delete>
	
	<delete id="deleteByRoleId" parameterType="java.lang.Long">
		DELETE FROM AUTHZ_R_ROLE_PERMISSION
		WHERE ROLE_ID = #{roleId, jdbcType=INTEGER}
	</delete>
	
	<insert id="insert" parameterType="com.ruban.rbac.domain.authz.RolePermission" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO AUTHZ_R_ROLE_PERMISSION (
			FLAG, RESOURCE_ID, ROLE_ID, MOD_TIME, MOD_USER_ID
		)
		VALUES(
			#{flag, jdbcType=BIT},
			#{resourceId, jdbcType=INTEGER},
			#{roleId, jdbcType=INTEGER},
			#{modTime, jdbcType=TIMESTAMP},
			#{modUserId, jdbcType=INTEGER}
		)
	</insert>
	
	<update id="update" parameterType="com.ruban.rbac.domain.authz.RolePermission">
		UPDATE AUTHZ_T_ROLE
		SET 
			ROLE_ID = #{roleId, jdbcType=INTEGER},
			RESOURCE_ID = #{resourceId, jdbcType=INTEGER},
			MOD_TIME = #{modTime, jdbcType=TIMESTAMP},
			MOD_USER_ID = #{modUserId, jdbcType=INTEGER}
		WHERE ID = #{id, jdbcType=INTEGER}
	</update>
</mapper>